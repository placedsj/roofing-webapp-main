import React, { useState } from 'react';
import { Button } from '../ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '../ui/dialog';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Textarea } from '../ui/textarea';
import { useToast } from '../ui/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { useGoogleService } from '../../hooks/useGoogleService';
import { formatMoneyValue, formatNumber } from '../../lib/utils';
import { transformInvoiceForPDF } from '../../lib/pdf-utils';
import { ModernInvoiceDocument } from '../pdf-render/modern-invoice-doc';
import { pdf } from '@react-pdf/renderer';
import { Mail, Loader2, FileText } from 'lucide-react';
import { Checkbox } from '../ui/checkbox';

interface EmailInvoiceDialogProps {
  invoice: any;
  trigger?: React.ReactNode;
}

// Email Templates
interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  message: string;
  description: string;
}

interface PDFDisplayOptions {
  showPaymentHistory: boolean;
  showCustomerNotes: boolean;
  showPaymentInformation: boolean;
}

const getEmailTemplates = (invoice: any): EmailTemplate[] => [
  {
    id: 'standard',
    name: 'Standard Invoice',
    description: 'Regular invoice with payment details',
    subject: `Invoice INV-${formatNumber(invoice?.invoice_number || 0)} from Rios Roofing`,
    message: `Dear ${invoice?.customer?.first_name || 'Customer'},

      We hope this email finds you well. Please find your invoice attached to this email for the roofing services we provided.

      Please review the detailed invoice information below, including payment history if applicable. The attached PDF contains the complete invoice for your records.

      If you have any questions about this invoice or need clarification on any of the services provided, please don't hesitate to reach out to us.

      Thank you for choosing Rios Roofing for your roofing needs!

      Best regards,
      Rios Roofing Services
      150 Tallant St, Houston TX 77076
      Phone: 832-310-3593
      Email: rrios.roofing@gmail.com`
  },
  {
    id: 'initial_down_payment',
    name: 'Initial Down Payment Received',
    description: 'Thank customer for down payment and notify about project start',
    subject: `Down Payment Received - Project Ready to Begin - INV-${formatNumber(invoice?.invoice_number || 0)}`,
    message: `Dear ${invoice?.customer?.first_name || 'Customer'},

      Thank you for your down payment! We're excited to confirm that we have received your initial payment and are ready to begin your roofing project.

      Our team is now proceeding with the procurement of materials and will have everything ready to start as soon as possible. We will contact you within the next 1-2 business days to schedule the project start date that works best for you.

      Please review the invoice details below for your records. The remaining balance will be due upon project completion.

      We appreciate your trust in Rios Roofing and look forward to delivering exceptional results for your roofing project!

      Best regards,
      Rios Roofing Services
      150 Tallant St, Houston TX 77076
      Phone: 832-310-3593
      Email: rrios.roofing@gmail.com`
  },
  {
    id: 'payment_received',
    name: 'Payment Received Notification',
    description: 'Acknowledge a new payment has been received',
    subject: `Payment Received - Thank You - INV-${formatNumber(invoice?.invoice_number || 0)}`,
    message: `Dear ${invoice?.customer?.first_name || 'Customer'},

      Thank you for your recent payment! We wanted to confirm that we have successfully received and processed your payment.

      Please review the updated invoice details below, including your payment history and current balance. Your prompt payments help us maintain our high-quality service standards.

      If you have any questions about your account balance or payment history, please don't hesitate to contact us.

      We truly appreciate your business and timely payments!

      Best regards,
      Rios Roofing Services
      150 Tallant St, Houston TX 77076
      Phone: 832-310-3593
      Email: rrios.roofing@gmail.com`
  },
  {
    id: 'final_payment',
    name: 'Project Complete - Final Payment',
    description: 'Project completion notification with final payment confirmation',
    subject: `Project Complete - Final Payment Received - INV-${formatNumber(invoice?.invoice_number || 0)}`,
    message: `Dear ${invoice?.customer?.first_name || 'Customer'},

      Congratulations! We're pleased to confirm that your roofing project has been completed successfully and your final payment has been received.

      Your invoice is now paid in full, and we want to thank you for choosing Rios Roofing for your roofing needs. We take pride in delivering quality workmanship and are confident that your new roof will serve you well for years to come.

      Please find the final invoice summary below for your records. We also recommend keeping all documentation for warranty purposes.

      If you have any questions about your completed project or need any follow-up services, please don't hesitate to reach out. We're always here to help!

      Thank you once again for your business and trust in our services.

      Best regards,
      Rios Roofing Services
      150 Tallant St, Houston TX 77076
      Phone: 832-310-3593
      Email: rrios.roofing@gmail.com`
  }
];

export const EmailInvoiceDialog: React.FC<EmailInvoiceDialogProps> = ({ invoice, trigger }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState('standard');

  // PDF Display Options state
  const [displayOptions, setDisplayOptions] = useState<PDFDisplayOptions>({
    showPaymentHistory: true,
    showCustomerNotes: true,
    showPaymentInformation: true
  });

  // Toggle display option
  const toggleOption = (key: keyof PDFDisplayOptions) => {
    setDisplayOptions((prev) => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  // Debug: Log the invoice data being passed to the dialog
  console.log('🔍 EmailInvoiceDialog - Invoice data received:', {
    invoice,
    invoiceId: invoice?.id,
    invoiceNumber: invoice?.invoice_number,
    invoiceTotal: invoice?.total,
    paymentsCount: invoice?.invoice_payment?.length || 0,
    payments: invoice?.invoice_payment,
    customerEmail: invoice?.customer?.email,
    customerName: invoice?.customer
      ? `${invoice.customer.first_name} ${invoice.customer.last_name}`
      : 'Unknown',
    amountDueFromDB: invoice?.amount_due
  });

  // Get email templates
  const emailTemplates = getEmailTemplates(invoice);
  const currentTemplate =
    emailTemplates.find((t) => t.id === selectedTemplate) || emailTemplates[0];

  const [emailForm, setEmailForm] = useState({
    to: invoice?.customer?.email || '',
    cc: '',
    subject: currentTemplate.subject,
    message: currentTemplate.message
  });

  const { toast } = useToast();
  const {
    sendEmail,
    isInitialized,
    isLoading: serviceLoading,
    error: serviceError,
    checkGmailPermissions
  } = useGoogleService();

  const handleFormChange = (field: string, value: string) => {
    setEmailForm((prev) => ({
      ...prev,
      [field]: value
    }));
  };

  const handleTemplateChange = (templateId: string) => {
    setSelectedTemplate(templateId);
    const template = emailTemplates.find((t) => t.id === templateId);
    if (template) {
      setEmailForm((prev) => ({
        ...prev,
        subject: template.subject,
        message: template.message
      }));
    }
  };

  // Helper function to get invoice PDF filename
  const getInvoicePDFFilename = (invoice: any): string => {
    const invoiceNumber = formatNumber(invoice.invoice_number || 0);
    const customerName = invoice.customer
      ? `${invoice.customer.first_name}_${invoice.customer.last_name}`.replace(/\s+/g, '_')
      : 'Unknown_Customer';
    return `INV-${invoiceNumber}_${customerName}.pdf`;
  };

  // Helper function to generate PDF as base64
  const generatePDFBase64 = async (invoiceData: any): Promise<string> => {
    try {
      // Ensure Buffer is available for PDF generation
      if (typeof Buffer === 'undefined') {
        console.warn('Buffer not available, PDF generation may fail');
      }

      // Generate PDF blob with display options
      const blob = await pdf(
        <ModernInvoiceDocument invoice={invoiceData} displayOptions={displayOptions} />
      ).toBlob();

      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => {
          if (reader.result) {
            try {
              // Get the base64 content without the data URL prefix
              const base64 = (reader.result as string).split(',')[1];

              // Validate base64 string
              if (!base64 || base64.length === 0) {
                throw new Error('Failed to extract base64 data from PDF');
              }

              // Test if the base64 is valid by trying to decode it
              try {
                atob(base64.substring(0, Math.min(100, base64.length)));
              } catch (atobError) {
                throw new Error('Generated base64 data is invalid');
              }

              resolve(base64);
            } catch (decodeError) {
              console.error('Base64 validation error:', decodeError);
              reject(new Error('Generated PDF contains invalid base64 data'));
            }
          } else {
            reject(new Error('Failed to convert PDF to base64'));
          }
        };
        reader.onerror = (error) => {
          console.error('FileReader error:', error);
          reject(new Error('Failed to read PDF blob'));
        };
        reader.readAsDataURL(blob);
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      if (error instanceof Error) {
        throw new Error(`PDF generation failed: ${error.message}`);
      }
      throw new Error('Failed to generate PDF for email attachment');
    }
  };

  // Helper function to calculate total payments - handles both payment field names
  const calculateTotalPayments = (invoice: any) => {
    const payments = invoice?.invoice_payment || invoice?.payments || [];
    if (!Array.isArray(payments)) return 0;
    return payments.reduce((sum: number, payment: any) => {
      const amount = parseFloat(payment.amount) || 0;
      return sum + amount;
    }, 0);
  };

  // Helper function to calculate amount due - prefer DB value if available
  const calculateAmountDue = (invoice: any) => {
    // If amount_due exists in DB and is valid, use it
    if (
      invoice?.amount_due !== null &&
      invoice?.amount_due !== undefined &&
      invoice?.amount_due >= 0
    ) {
      return parseFloat(invoice.amount_due) || 0;
    }

    // Otherwise calculate it
    const total = parseFloat(invoice?.total) || 0;
    const totalPayments = calculateTotalPayments(invoice);
    return Math.max(0, total - totalPayments);
  };

  const handleSendEmail = async () => {
    // Debug: Log email form and invoice data before processing
    console.log('📧 handleSendEmail - Starting email process:', {
      emailForm,
      invoice,
      invoiceTotal: invoice?.total,
      payments: invoice?.invoice_payment || invoice?.payments,
      totalPayments: calculateTotalPayments(invoice),
      amountDue: calculateAmountDue(invoice),
      amountDueFromDB: invoice?.amount_due
    });

    if (!emailForm.to.trim()) {
      toast({
        title: 'Validation Error',
        description: 'Please enter a recipient email address.',
        variant: 'destructive'
      });
      return;
    }

    if (!emailForm.subject.trim()) {
      toast({
        title: 'Validation Error',
        description: 'Please enter an email subject.',
        variant: 'destructive'
      });
      return;
    }

    setIsSending(true);

    try {
      // Check permissions first
      const hasPermissions = await checkGmailPermissions();
      if (!hasPermissions) {
        toast({
          title: 'Permission Required',
          description:
            'Gmail access is required to send emails. Please ensure you have granted the necessary permissions.',
          variant: 'destructive'
        });
        return;
      }

      // Show progress for PDF generation
      toast({
        title: 'Preparing Email',
        description: 'Generating invoice PDF attachment...',
        variant: 'default'
      });

      // Generate PDF for attachment
      let pdfBase64: string;
      let pdfFilename: string;

      try {
        const invoiceForPDF = transformInvoiceForPDF(invoice);
        pdfFilename = getInvoicePDFFilename(invoiceForPDF);
        pdfBase64 = await generatePDFBase64(invoiceForPDF);
      } catch (pdfError) {
        console.error('PDF generation error:', pdfError);

        // Ask user if they want to send without PDF attachment
        const sendWithoutPDF = window.confirm(
          'PDF generation failed. Would you like to send the email without the PDF attachment?'
        );

        if (!sendWithoutPDF) {
          toast({
            title: 'Email Cancelled',
            description: 'Email not sent due to PDF generation failure',
            variant: 'destructive'
          });
          return;
        }

        // Send without PDF
        pdfBase64 = '';
        pdfFilename = '';
      }

      const result = await sendEmail({
        to: emailForm.to.split(',').map((email: string) => email.trim()),
        cc: emailForm.cc ? emailForm.cc.split(',').map((email: string) => email.trim()) : undefined,
        subject: emailForm.subject,
        htmlBody: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; border: 1px solid #e5e7eb;">
            <!-- Header with Logo -->
            <div style="background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%); color: white; padding: 25px; text-align: center; border-radius: 8px 8px 0 0;">
              <div style="display: flex; align-items: center; justify-content: center; gap: 15px;">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="1080" height="1080">
                  <path d="M0 0 C356.4 0 712.8 0 1080 0 C1080 356.4 1080 712.8 1080 1080 C723.6 1080 367.2 1080 0 1080 C0 723.6 0 367.2 0 0 Z " fill="#2460E5" transform="translate(0,0)"/>
                  <path d="M0 0 C8.10497731 3.81757686 15.46790576 9.25945348 22.75 14.4375 C30.60048059 19.95809025 38.50032706 25.38534423 46.5 30.6875 C55.65914137 36.76303873 64.77948052 42.89235248 73.875 49.0625 C74.52122314 49.50081146 75.16744629 49.93912292 75.83325195 50.39071655 C78.4986761 52.19864939 81.1640192 54.00670154 83.8291626 55.81504822 C90.83314522 60.56680816 97.84391243 65.30852007 104.85513306 70.04959106 C116.46916752 77.90327141 128.08032842 85.76118038 139.6875 93.625 C140.32255463 94.05524475 140.95760925 94.4854895 141.61190796 94.92877197 C146.71019984 98.38289488 151.80829092 101.83731412 156.90637207 105.29174805 C161.37498603 108.31963945 165.84368221 111.34740944 170.3125 114.375 C170.94731293 114.80508362 171.58212585 115.23516724 172.23617554 115.67828369 C182.48772071 122.62338639 192.74311948 129.56277979 203 136.5 C213.89844835 143.8711433 224.79486123 151.24527396 235.6875 158.625 C236.32255463 159.05524475 236.95760925 159.4854895 237.61190796 159.92877197 C242.71019984 163.38289488 247.80829092 166.83731412 252.90637207 170.29174805 C257.37498603 173.31963945 261.84368221 176.34740944 266.3125 179.375 C267.26471939 180.02012543 267.26471939 180.02012543 268.23617554 180.67828369 C278.48772071 187.62338639 288.74311948 194.56277979 299 201.5 C313.72920062 211.46206478 328.45256685 221.43271377 343.17333984 231.40722656 C347.67580536 234.45796591 352.17851109 237.50835066 356.68145752 240.55838013 C359.89499406 242.73507544 363.10823642 244.91220209 366.32080078 247.09033203 C372.35966492 251.18402495 378.40154323 255.27306405 384.45339966 259.34753418 C387.30467967 261.26755951 390.15435269 263.18996247 393.00390625 265.11254883 C394.35971346 266.02633587 395.71630277 266.93896372 397.07373047 267.8503418 C398.95871299 269.11602676 400.84093518 270.3857231 402.72265625 271.65625 C403.79265869 272.37619141 404.86266113 273.09613281 405.96508789 273.83789062 C412.72256393 278.65200114 417.92596594 282.8669644 419.41796875 291.38671875 C420.09060086 302.9668986 411.89761912 312.4529532 405.625 321.5 C404.89539063 322.56347656 404.16578125 323.62695312 403.4140625 324.72265625 C401.97356386 326.81909623 400.52844372 328.91236937 399.07836914 331.00219727 C397.71520964 332.96839432 396.35993121 334.94008382 395.01342773 336.91772461 C394.40184814 337.80983643 393.79026855 338.70194824 393.16015625 339.62109375 C392.35783569 340.79949829 392.35783569 340.79949829 391.53930664 342.00170898 C388.48038262 345.97273089 384.91195301 348.01580353 380 349 C378.39972928 349.13938706 376.79354296 349.21964958 375.1875 349.25 C374.37667969 349.27578125 373.56585937 349.3015625 372.73046875 349.328125 C366.36496178 348.56317137 361.13276816 344.98376899 355.96875 341.42578125 C354.99742126 340.76730949 354.99742126 340.76730949 354.00646973 340.09553528 C352.66050352 339.18240353 351.31622779 338.26677517 349.97363281 337.34869385 C348.114274 336.07808982 346.24991893 334.81533537 344.3828125 333.55615234 C340.75086423 331.10632171 337.12521281 328.64728233 333.5 326.1875 C332.1556405 325.2759804 330.81123839 324.36452363 329.46679688 323.453125 C326.68863921 321.56973876 323.91066031 319.68608931 321.1328125 317.80224609 C315.22966275 313.79923326 309.32424966 309.7995624 303.41891479 305.79977417 C301.49543471 304.49690771 299.57204284 303.1939111 297.64868164 301.89086914 C291.75201677 297.89601746 285.85505789 293.90160208 279.95698547 289.90882874 C264.28582829 279.29999717 248.625566 268.6759301 233 258 C233 259.78512863 234.55129071 261.02598064 235.625 262.375 C242.30159942 271.24039026 246.06647309 280.34816444 249 291 C249.37125 292.155 249.7425 293.31 250.125 294.5 C252.61560323 304.46241294 253.32040103 314.32501641 253.25 324.5625 C253.25773438 325.69107422 253.26546875 326.81964844 253.2734375 327.98242188 C253.21963814 351.37169173 244.67252123 372.62162612 229 390 C228.32453125 390.75796875 227.6490625 391.5159375 226.953125 392.296875 C215.90538331 404.0091425 201.90268211 412.15527974 188 420 C188.4947583 420.72960937 188.9895166 421.45921875 189.49926758 422.2109375 C201.58843224 440.04132034 213.65464246 457.88706759 225.7043457 475.74414062 C226.86018534 477.45703359 228.01602843 479.16992421 229.171875 480.8828125 C230.02884224 482.15279083 230.02884224 482.15279083 230.90312195 483.44842529 C237.77609813 493.63304221 244.65591701 503.81303463 251.53662109 513.99243164 C257.18328129 522.34691002 262.82472759 530.70487371 268.4609375 539.06640625 C270.32571521 541.83206481 272.19056076 544.59767761 274.05541992 547.36328125 C275.25941335 549.14932062 276.46303246 550.93561239 277.66625977 552.72216797 C279.33648961 555.20211401 281.00796656 557.6812152 282.6796875 560.16015625 C283.42319962 561.26527306 283.42319962 561.26527306 284.18173218 562.39271545 C286.01141821 565.10396367 287.82841856 567.77856256 289.83251953 570.36499023 C291 572 291 572 291 574 C280.29950702 574.23198245 269.59961459 574.40952189 258.89711666 574.51812172 C253.92700661 574.57025351 248.95861999 574.64092101 243.98950195 574.75439453 C239.19124576 574.86327706 234.39464369 574.92288637 229.59524727 574.94877243 C227.76702389 574.96721127 225.93888842 575.00322262 224.11137199 575.05730057 C209.80948006 575.46356737 209.80948006 575.46356737 205.39741516 571.89494324 C203.57421608 569.33441869 202.25672465 566.87460803 201 564 C200.37649658 563.02812744 199.75299316 562.05625488 199.1105957 561.05493164 C198.63710693 560.26465576 198.16361816 559.47437988 197.67578125 558.66015625 C197.12873535 557.75289795 196.58168945 556.84563965 196.01806641 555.91088867 C195.17381104 554.50093628 195.17381104 554.50093628 194.3125 553.0625 C189.98470729 545.89261766 185.6208539 538.75329263 181.125 531.6875 C176.34444419 524.16873234 171.65926829 516.59448664 167 509 C161.92064655 500.72202667 156.79723997 492.47675978 151.58911133 484.27929688 C146.5430578 476.31749939 141.61652485 468.28225702 136.69335938 460.24414062 C136.05591797 459.20451172 135.41847656 458.16488281 134.76171875 457.09375 C134.14216309 456.083125 133.52260742 455.0725 132.88427734 454.03125 C130.40132394 450.03690568 127.840047 446.09497102 125.26098633 442.16210938 C124 440 124 440 124 438 C110.47 438 96.94 438 83 438 C83 482.88 83 527.76 83 574 C50.5775 574.804375 50.5775 574.804375 17.5 575.625 C10.70212891 575.8617041 3.90425781 576.0984082 -3.09960938 576.34228516 C-11.46972656 576.4597168 -11.46972656 576.4597168 -15.40148926 576.48153687 C-18.13120223 576.52136895 -20.82853221 576.60170777 -23.55187988 576.7449646 C-42.00350661 577.67290336 -42.00350661 577.67290336 -50 574 C-56.84902286 567.79589702 -60.61861266 559.6804776 -64.38447571 551.37388229 C-66.99364337 545.92486204 -70.27934924 540.93570383 -73.5625 535.875 C-74.80771238 533.89252174 -76.05026258 531.90836655 -77.2890625 529.921875 C-78.52592333 527.94784252 -79.76290235 525.97388408 -81 524 C-88.7768706 511.5914071 -96.52565008 499.16753266 -104.1875 486.6875 C-109.71461476 477.68507803 -115.296061 468.72100833 -120.9609375 459.8046875 C-125.33597637 452.88785227 -129.6623035 445.94031439 -134 439 C-147.2 438.67 -160.4 438.34 -174 438 C-174 482.88 -174 527.76 -174 574 C-199.08 574 -224.16 574 -250 574 C-250 471.04 -250 368.08 -250 262 C-258.34477038 267.28086374 -258.34477038 267.28086374 -266.55859375 272.734375 C-267.50621582 273.38051758 -268.45383789 274.02666016 -269.43017578 274.69238281 C-270.42259277 275.37139648 -271.41500977 276.05041016 -272.4375 276.75 C-274.08369449 277.87279792 -275.72989312 278.99558978 -277.37628174 280.11810303 C-278.51863467 280.89707107 -279.66084535 281.67624777 -280.80291748 282.45562744 C-287.06922638 286.73179712 -293.34674964 290.9913909 -299.625 295.25 C-300.79419537 296.04328555 -301.96338478 296.83657989 -303.13256836 297.62988281 C-309.31339861 301.82324137 -315.49587338 306.01416799 -321.6796875 310.203125 C-322.32321671 310.639095 -322.96674591 311.075065 -323.629776 311.52424622 C-326.87968476 313.72577277 -330.13014462 315.92647852 -333.3815918 318.12573242 C-339.2441457 322.09229887 -345.10237424 326.06464951 -350.94113159 330.06619263 C-353.49663184 331.81740519 -356.05444297 333.56522742 -358.61230469 335.31298828 C-359.81098372 336.13359279 -361.0084534 336.95596719 -362.20458984 337.78027344 C-379.30524831 349.56408426 -379.30524831 349.56408426 -387.4375 349.625 C-388.46746094 349.65851563 -389.49742187 349.69203125 -390.55859375 349.7265625 C-400.67547155 347.59064959 -405.58871639 340.06847814 -410.96289062 331.94140625 C-411.8713119 330.54441267 -412.77951378 329.14727639 -413.6875 327.75 C-414.60588824 326.3674696 -415.52580122 324.98595078 -416.44726562 323.60546875 C-432.26098273 299.81292694 -432.26098273 299.81292694 -431 289 C-429.25789065 282.57597178 -425.11788401 279.06190053 -419.796875 275.40234375 C-419.18313019 274.97239609 -418.56938538 274.54244843 -417.93704224 274.09947205 C-415.96459698 272.72319681 -413.98393711 271.35964954 -412 270 C-411.35887268 269.56012756 -410.71774536 269.12025513 -410.05718994 268.66705322 C-405.34544382 265.44224164 -400.61149826 262.2507914 -395.875 259.0625 C-394.3801378 258.05409886 -392.88543022 257.04546847 -391.39086914 256.03662109 C-389.11737922 254.50201197 -386.84381154 252.96751997 -384.56977844 251.43371582 C-377.51714783 246.67670229 -370.47567721 241.9033621 -363.4375 237.125 C-362.44411621 236.45090088 -361.45073242 235.77680176 -360.42724609 235.08227539 C-358.87232163 234.02681979 -357.31799794 232.96763547 -355.81938171 231.83364868 C-351.93537098 228.97955184 -348.19285029 227.28323597 -343.66186523 225.6184082 C-335.98187867 222.34447012 -328.87299155 218.68984494 -325 211 C-320.14154993 194.68761902 -322.42133341 175.61327923 -323.05297852 158.84362793 C-323.32059835 151.07269595 -323.42653454 143.29820567 -323.54368305 135.52378941 C-323.63595476 129.47780837 -323.75582829 123.43721863 -323.96440125 117.39402771 C-324.01113228 115.72854637 -324.01113228 115.72854637 -324.05880737 114.02941895 C-324.11695329 111.96931355 -324.19058397 109.90955653 -324.28343201 107.85072327 C-324.469214 100.15390841 -322.63405134 95.13238538 -317.6875 89.25 C-312.5672562 84.96328426 -307.53215142 81.89741324 -300.79101562 81.80712891 C-299.15791443 81.78303452 -299.15791443 81.78303452 -297.49182129 81.75845337 C-292.48543906 81.71392549 -287.47919058 81.67289661 -282.47265625 81.64990234 C-279.8384515 81.63339 -277.20429068 81.60616327 -274.5703125 81.56787109 C-270.76538925 81.51284517 -266.9615187 81.49118274 -263.15625 81.4765625 C-261.98920532 81.45389313 -260.82216064 81.43122375 -259.61975098 81.40786743 C-251.25827234 81.42926021 -244.32107325 82.96042569 -238.0592041 88.81436157 C-233.85312023 93.36151264 -231.74054066 97.7946173 -231.77294922 104.06567383 C-231.77317581 105.53663261 -231.77317581 105.53663261 -231.77340698 107.03730774 C-231.78372955 108.0833165 -231.79405212 109.12932526 -231.8046875 110.20703125 C-231.8075174 111.28756271 -231.81034729 112.36809418 -231.81326294 113.48136902 C-231.82443868 116.92519301 -231.84953882 120.36875489 -231.875 123.8125 C-231.88503315 126.15038686 -231.89415842 128.48827781 -231.90234375 130.82617188 C-231.9243695 136.55087035 -231.95782132 142.27541645 -232 148 C-215.36474262 136.75253895 -198.73087563 125.5030937 -182.11706543 114.22396851 C-172.91527459 107.97688266 -163.70890515 101.73659361 -154.5 95.5 C-144.6633746 88.8381762 -134.82962932 82.17214234 -125 75.5 C-115.23245083 68.87014728 -105.46149394 62.24534809 -95.6875 55.625 C-95.04380463 55.18899475 -94.40010925 54.7529895 -93.73690796 54.30377197 C-88.5018643 50.75789804 -83.26662193 47.21231753 -78.03137207 43.66674805 C-77.38196655 43.22693604 -76.73256104 42.78712402 -76.06347656 42.33398438 C-75.4146199 41.89454498 -74.76576324 41.45510559 -74.09724426 41.00234985 C-72.13500545 39.67336025 -70.17284873 38.34424951 -68.21069336 37.01513672 C-65.62859144 35.26614655 -63.04602975 33.51783827 -60.46313477 31.77001953 C-54.66740374 27.8470523 -48.87535284 23.91902709 -43.09825134 19.96865845 C-40.54858146 18.22533493 -37.99712564 16.48463408 -35.44564819 14.74395752 C-34.25279537 13.92894106 -33.06088445 13.11254393 -31.87002563 12.2946167 C-11.15391417 -1.9334226 -11.15391417 -1.9334226 0 0 Z " fill="#FBFBFB" transform="translate(546,227)"/>
                  <path d="M0 0 C8.10497731 3.81757686 15.46790576 9.25945348 22.75 14.4375 C30.60048059 19.95809025 38.50032706 25.38534423 46.5 30.6875 C55.65914137 36.76303873 64.77948052 42.89235248 73.875 49.0625 C74.52122314 49.50081146 75.16744629 49.93912292 75.83325195 50.39071655 C78.4986761 52.19864939 81.1640192 54.00670154 83.8291626 55.81504822 C90.83314522 60.56680816 97.84391243 65.30852007 104.85513306 70.04959106 C116.46916752 77.90327141 128.08032842 85.76118038 139.6875 93.625 C140.32255463 94.05524475 140.95760925 94.4854895 141.61190796 94.92877197 C146.71019984 98.38289488 151.80829092 101.83731412 156.90637207 105.29174805 C161.37498603 108.31963945 165.84368221 111.34740944 170.3125 114.375 C170.94731293 114.80508362 171.58212585 115.23516724 172.23617554 115.67828369 C182.48772071 122.62338639 192.74311948 129.56277979 203 136.5 C213.89844835 143.8711433 224.79486123 151.24527396 235.6875 158.625 C236.32255463 159.05524475 236.95760925 159.4854895 237.61190796 159.92877197 C242.71019984 163.38289488 247.80829092 166.83731412 252.90637207 170.29174805 C257.37498603 173.31963945 261.84368221 176.34740944 266.3125 179.375 C267.26471939 180.02012543 267.26471939 180.02012543 268.23617554 180.67828369 C278.48772071 187.62338639 288.74311948 194.56277979 299 201.5 C313.72920062 211.46206478 328.45256685 221.43271377 343.17333984 231.40722656 C347.67580536 234.45796591 352.17851109 237.50835066 356.68145752 240.55838013 C359.89499406 242.73507544 363.10823642 244.91220209 366.32080078 247.09033203 C372.35966492 251.18402495 378.40154323 255.27306405 384.45339966 259.34753418 C387.30467967 261.26755951 390.15435269 263.18996247 393.00390625 265.11254883 C394.35971346 266.02633587 395.71630277 266.93896372 397.07373047 267.8503418 C398.95871299 269.11602676 400.84093518 270.3857231 402.72265625 271.65625 C403.79265869 272.37619141 404.86266113 273.09613281 405.96508789 273.83789062 C412.72256393 278.65200114 417.92596594 282.8669644 419.41796875 291.38671875 C420.09060086 302.9668986 411.89761912 312.4529532 405.625 321.5 C404.89539063 322.56347656 404.16578125 323.62695312 403.4140625 324.72265625 C401.97356386 326.81909623 400.52844372 328.91236937 399.07836914 331.00219727 C397.71520964 332.96839432 396.35993121 334.94008382 395.01342773 336.91772461 C394.40184814 337.80983643 393.79026855 338.70194824 393.16015625 339.62109375 C392.35783569 340.79949829 392.35783569 340.79949829 391.53930664 342.00170898 C388.48038262 345.97273089 384.91195301 348.01580353 380 349 C378.39972928 349.13938706 376.79354296 349.21964958 375.1875 349.25 C374.37667969 349.27578125 373.56585937 349.3015625 372.73046875 349.328125 C366.36496178 348.56317137 361.13276816 344.98376899 355.96875 341.42578125 C354.99742126 340.76730949 354.99742126 340.76730949 354.00646973 340.09553528 C352.66050352 339.18240353 351.31622779 338.26677517 349.97363281 337.34869385 C348.114274 336.07808982 346.24991893 334.81533537 344.3828125 333.55615234 C340.75086423 331.10632171 337.12521281 328.64728233 333.5 326.1875 C332.1556405 325.2759804 330.81123839 324.36452363 329.46679688 323.453125 C326.68863921 321.56973876 323.91066031 319.68608931 321.1328125 317.80224609 C315.22966275 313.79923326 309.32424966 309.7995624 303.41891479 305.79977417 C301.49543471 304.49690771 299.57204284 303.1939111 297.64868164 301.89086914 C291.0777127 297.43919232 284.50613472 292.98841805 277.93359375 288.5390625 C270.86878547 283.75629527 263.80579575 278.97085199 256.74456787 274.18280029 C255.0585807 273.03971716 253.37232779 271.89702697 251.68603516 270.75439453 C248.7059775 268.73411872 245.72767129 266.71129086 242.75 264.6875 C241.91202881 264.1198291 241.07405762 263.5521582 240.21069336 262.96728516 C235.96544966 260.07758251 231.78135846 257.12378261 227.640625 254.0859375 C221.86998251 249.86725577 215.95812374 245.88533135 210 241.9375 C208.99710938 241.26912109 207.99421875 240.60074219 206.9609375 239.91210938 C202.24542736 236.77757454 197.51276815 233.67953488 192.72265625 230.66015625 C185.52167988 226.09765158 178.48887919 221.28881832 171.4375 216.5 C169.94045897 215.48502556 168.4433049 214.47021783 166.94604492 213.45556641 C163.84152942 211.3515451 160.73749642 209.24681478 157.63378906 207.14160156 C151.07024044 202.6905225 144.50014691 198.24912613 137.93045044 193.80712891 C125.81337942 185.61373243 113.70162532 177.41250002 101.59243774 169.2074585 C91.39824365 162.30011122 81.20005661 155.39868675 71 148.5 C51.73681605 135.47119423 51.73681605 135.47119423 43.96853638 130.20741272 C40.75419256 128.02941484 37.5384019 125.85363943 34.31884766 123.68334961 C28.51560337 119.767268 22.73245504 115.82890566 17.00869751 111.79721069 C14.42157956 109.97645548 11.82559139 108.16857777 9.22894287 106.3614502 C8.00371605 105.50300486 6.78309526 104.63794351 5.56744385 103.76599121 C3.89709773 102.5682527 2.21264482 101.39357455 0.5234375 100.22265625 C-0.42611816 99.54984619 -1.37567383 98.87703613 -2.35400391 98.18383789 C-4.91028201 96.72498351 -4.91028201 96.72498351 -7.45239258 97.54101562 C-10.48786702 99.27939562 -13.40782403 101.13588858 -16.28515625 103.12109375 C-16.88960068 103.53243057 -17.4940451 103.9437674 -18.11680603 104.36756897 C-20.10174509 105.71981452 -22.08206836 107.07866369 -24.0625 108.4375 C-25.4599565 109.39110871 -26.85774793 110.34422678 -28.25585938 111.296875 C-31.12147361 113.25022748 -33.98545987 115.20593104 -36.84814453 117.16357422 C-42.32348778 120.90646797 -47.81296997 124.62842662 -53.30310059 128.34957886 C-55.59482298 129.90326311 -57.88564265 131.45827575 -60.17648315 133.01325989 C-72.13730846 141.13180237 -84.10750864 149.2365143 -96.07666016 157.34277344 C-100.61730568 160.41802561 -105.15766696 163.49369731 -109.69793701 166.56950378 C-112.91813211 168.75102373 -116.13840755 170.93242482 -119.35888672 173.11352539 C-125.23801683 177.09539617 -131.11644725 181.0782839 -136.99186707 185.06562805 C-154.20694835 196.74851206 -171.47252073 208.34918719 -188.80224609 219.86157227 C-196.98030426 225.30290022 -205.11927247 230.8008387 -213.25 236.3125 C-213.93486481 236.77665314 -214.61972961 237.24080627 -215.3253479 237.71902466 C-232.55999363 249.39568759 -232.55999363 249.39568759 -249.65625 261.2734375 C-258.89510363 267.77448331 -268.18705749 274.1706744 -277.6027832 280.41308594 C-284.89222372 285.24930477 -292.13996753 290.14543283 -299.375 295.0625 C-299.95934814 295.45956146 -300.54369629 295.85662292 -301.14575195 296.26571655 C-303.56115682 297.9070114 -305.97650019 299.5483966 -308.3916626 301.19004822 C-312.8236281 304.2021341 -317.25857881 307.20978623 -321.6953125 310.21484375 C-322.33785477 310.65007355 -322.98039703 311.08530334 -323.64241028 311.53372192 C-326.88784442 313.73175315 -330.13386743 315.92890966 -333.38061523 318.125 C-339.24346147 322.09185913 -345.10203919 326.06441989 -350.94113159 330.06619263 C-353.49663184 331.81740519 -356.05444297 333.56522742 -358.61230469 335.31298828 C-359.81098372 336.13359279 -361.0084534 336.95596719 -362.20458984 337.78027344 C-379.30524831 349.56408426 -379.30524831 349.56408426 -387.4375 349.625 C-388.46746094 349.65851563 -389.49742187 349.69203125 -390.55859375 349.7265625 C-400.67547155 347.59064959 -405.58871639 340.06847814 -410.96289062 331.94140625 C-411.8713119 330.54441267 -412.77951378 329.14727639 -413.6875 327.75 C-414.60588824 326.3674696 -415.52580122 324.98595078 -416.44726562 323.60546875 C-432.26098273 299.81292694 -432.26098273 299.81292694 -431 289 C-429.25789065 282.57597178 -425.11788401 279.06190053 -419.796875 275.40234375 C-419.18313019 274.97239609 -418.56938538 274.54244843 -417.93704224 274.09947205 C-415.96459698 272.72319681 -413.98393711 271.35964954 -412 270 C-411.35887268 269.56012756 -410.71774536 269.12025513 -410.05718994 268.66705322 C-405.34544382 265.44224164 -400.61149826 262.2507914 -395.875 259.0625 C-394.3801378 258.05409886 -392.88543022 257.04546847 -391.39086914 256.03662109 C-389.11737922 254.50201197 -386.84381154 252.96751997 -384.56977844 251.43371582 C-377.51714783 246.67670229 -370.47567721 241.9033621 -363.4375 237.125 C-362.44411621 236.45090088 -361.45073242 235.77680176 -360.42724609 235.08227539 C-358.87232163 234.02681979 -357.31799794 232.96763547 -355.81938171 231.83364868 C-351.93537098 228.97955184 -348.19285029 227.28323597 -343.66186523 225.6184082 C-335.98187867 222.34447012 -328.87299155 218.68984494 -325 211 C-320.14154993 194.68761902 -322.42133341 175.61327923 -323.05297852 158.84362793 C-323.32059835 151.07269595 -323.42653454 143.29820567 -323.54368305 135.52378941 C-323.63595476 129.47780837 -323.75582829 123.43721863 -323.96440125 117.39402771 C-324.01113228 115.72854637 -324.01113228 115.72854637 -324.05880737 114.02941895 C-324.11695329 111.96931355 -324.19058397 109.90955653 -324.28343201 107.85072327 C-324.469214 100.15390841 -322.63405134 95.13238538 -317.6875 89.25 C-312.5672562 84.96328426 -307.53215142 81.89741324 -300.79101562 81.80712891 C-299.15791443 81.78303452 -299.15791443 81.78303452 -297.49182129 81.75845337 C-292.48543906 81.71392549 -287.47919058 81.67289661 -282.47265625 81.64990234 C-279.8384515 81.63339 -277.20429068 81.60616327 -274.5703125 81.56787109 C-270.76538925 81.51284517 -266.9615187 81.49118274 -263.15625 81.4765625 C-261.98920532 81.45389313 -260.82216064 81.43122375 -259.61975098 81.40786743 C-251.25827234 81.42926021 -244.32107325 82.96042569 -238.0592041 88.81436157 C-233.85312023 93.36151264 -231.74054066 97.7946173 -231.77294922 104.06567383 C-231.77317581 105.53663261 -231.77317581 105.53663261 -231.77340698 107.03730774 C-231.78372955 108.0833165 -231.79405212 109.12932526 -231.8046875 110.20703125 C-231.8075174 111.28756271 -231.81034729 112.36809418 -231.81326294 113.48136902 C-231.82443868 116.92519301 -231.84953882 120.36875489 -231.875 123.8125 C-231.88503315 126.15038686 -231.89415842 128.48827781 -231.90234375 130.82617188 C-231.9243695 136.55087035 -231.95782132 142.27541645 -232 148 C-215.36474262 136.75253895 -198.73087563 125.5030937 -182.11706543 114.22396851 C-172.91527459 107.97688266 -163.70890515 101.73659361 -154.5 95.5 C-144.6633746 88.8381762 -134.82962932 82.17214234 -125 75.5 C-115.23245083 68.87014728 -105.46149394 62.24534809 -95.6875 55.625 C-95.04380463 55.18899475 -94.40010925 54.7529895 -93.73690796 54.30377197 C-88.5018643 50.75789804 -83.26662193 47.21231753 -78.03137207 43.66674805 C-77.38196655 43.22693604 -76.73256104 42.78712402 -76.06347656 42.33398438 C-75.4146199 41.89454498 -74.76576324 41.45510559 -74.09724426 41.00234985 C-72.13500545 39.67336025 -70.17284873 38.34424951 -68.21069336 37.01513672 C-65.62859144 35.26614655 -63.04602975 33.51783827 -60.46313477 31.77001953 C-54.66740374 27.8470523 -48.87535284 23.91902709 -43.09825134 19.96865845 C-40.54858146 18.22533493 -37.99712564 16.48463408 -35.44564819 14.74395752 C-34.25279537 13.92894106 -33.06088445 13.11254393 -31.87002563 12.2946167 C-11.15391417 -1.9334226 -11.15391417 -1.9334226 0 0 Z " fill="#FEFEFE" transform="translate(546,227)"/>
                  <path d="M0 0 C2.48658243 1.48270287 4.91234405 2.98042983 7.29638672 4.62426758 C8.24763428 5.2760498 9.19888184 5.92783203 10.17895508 6.59936523 C11.21028564 7.3127002 12.24161621 8.02603516 13.30419922 8.76098633 C14.4113094 9.52116198 15.5188232 10.28075009 16.62670898 11.03979492 C18.38910391 12.24738521 20.15122601 13.45535647 21.91218567 14.66503906 C28.07010456 18.89487258 34.25461981 23.08505624 40.44219971 27.27133179 C42.3892298 28.58873097 44.33579377 29.90681617 46.28222656 31.22509766 C56.712806 38.28921287 67.14750927 45.34723337 77.58248901 52.40484619 C87.70098346 59.24841511 97.81655359 66.09627789 107.92919922 72.94848633 C120.10549813 81.19884869 132.28536891 89.4439158 144.46972656 97.68237305 C151.14362133 102.19514137 157.81630746 106.70965612 164.4841156 111.23141479 C167.59230742 113.3390968 170.70120558 115.44573568 173.81015015 117.55230713 C175.28741012 118.55370107 176.76432772 119.55560028 178.24087524 120.55804443 C188.72147708 127.67749147 188.72147708 127.67749147 199.42919922 134.44848633 C195.27983718 135.83160701 192.29497088 134.39205412 188.30419922 133.07348633 C187.56298828 132.83887695 186.82177734 132.60426758 186.05810547 132.36254883 C180.58096388 130.60025098 180.58096388 130.60025098 179.42919922 129.44848633 C177.54148121 129.0902113 175.64296981 128.78849386 173.74169922 128.51098633 C171.98019531 128.25188477 171.98019531 128.25188477 170.18310547 127.98754883 C168.32492187 127.72071289 168.32492187 127.72071289 166.42919922 127.44848633 C165.22134766 127.2705957 164.01349609 127.09270508 162.76904297 126.90942383 C157.5785805 126.15259905 152.39757964 125.42120483 147.17919922 124.88598633 C143.42919922 124.44848633 143.42919922 124.44848633 141.42919922 123.44848633 C77.57419922 122.95348633 77.57419922 122.95348633 12.42919922 122.44848633 C12.42919922 226.39848633 12.42919922 330.34848633 12.42919922 437.44848633 C9.70201629 434.7213034 7.81165007 432.76971515 5.77880859 429.68408203 C5.29730347 428.95844559 4.81579834 428.23280914 4.31970215 427.48518372 C3.80927368 426.70608139 3.29884521 425.92697906 2.77294922 425.12426758 C2.22997192 424.30460007 1.68699463 423.48493256 1.12756348 422.64042664 C-0.60965363 420.01684289 -2.34067963 417.38925384 -4.07080078 414.76098633 C-6.32789187 411.33820524 -8.58810262 407.91751717 -10.85205078 404.49926758 C-11.41317566 403.65203629 -11.97430054 402.80480499 -12.5524292 401.93190002 C-16.69431881 395.70462029 -20.96485087 389.57964328 -25.30145264 383.48690796 C-30.11649891 376.71259514 -34.7336575 369.81582107 -39.32080078 362.88598633 C-40.1730913 361.60245537 -41.02563519 360.31909262 -41.87841797 359.03588867 C-43.60115351 356.44316318 -45.32275277 353.84968922 -47.04345703 351.25561523 C-50.95894859 345.35471656 -54.89067996 339.46464629 -58.82080078 333.57348633 C-60.1385806 331.59697149 -61.45629659 329.62041409 -62.77392578 327.64379883 C-63.58845215 326.42200928 -63.58845215 326.42200928 -64.41943359 325.17553711 C-64.79938477 324.60561035 -65.17933594 324.03568359 -65.57080078 323.44848633 C-62.68822382 320.36910043 -59.43128214 318.7421992 -55.69580078 316.88598633 C-47.92123626 312.87479724 -41.27819001 308.03505856 -34.57080078 302.44848633 C-33.68650391 301.72918945 -32.80220703 301.00989258 -31.89111328 300.26879883 C-14.51759037 285.49318589 -2.72897751 263.38865679 -0.71142578 240.60522461 C1.12258751 212.47731934 -2.6171026 183.49666585 -21.57080078 161.44848633 C-22.06708984 160.79750977 -22.56337891 160.1465332 -23.07470703 159.47583008 C-38.14531181 140.47704761 -64.58883747 132.0070593 -87.44580078 127.26098633 C-88.18693115 127.105896 -88.92806152 126.95080566 -89.69165039 126.79101562 C-92.31107791 126.28275196 -94.93351749 125.85468958 -97.57080078 125.44848633 C-98.7008252 125.27188477 -99.83084961 125.0952832 -100.99511719 124.91333008 C-116.50495462 122.74532104 -132.23630927 123.00154608 -147.86541748 122.84759521 C-151.7881259 122.80701299 -155.71070146 122.75617349 -159.63330078 122.70629883 C-167.27904169 122.61054634 -174.9248491 122.52583297 -182.57080078 122.44848633 C-180.05734079 119.89463359 -177.67863995 117.69390416 -174.67626953 115.73364258 C-173.51538818 114.9687854 -173.51538818 114.9687854 -172.33105469 114.18847656 C-171.0575415 113.3581189 -171.0575415 113.3581189 -169.75830078 112.51098633 C-167.85256223 111.25437206 -165.94766623 109.9964794 -164.04345703 108.73754883 C-162.48715576 107.70936035 -162.48715576 107.70936035 -160.89941406 106.66040039 C-154.80391069 102.60984585 -148.75152194 98.49567376 -142.69580078 94.38598633 C-141.36729791 93.48498324 -140.03876575 92.58402333 -138.71020508 91.68310547 C-136.0088999 89.85114634 -133.30784394 88.01882048 -130.60693359 86.1862793 C-124.73921717 82.20551052 -118.86822819 78.22957369 -112.99740601 74.25338745 C-110.42120775 72.50851312 -107.84517828 70.7633897 -105.26914978 69.01826477 C-100.07342442 65.49843195 -94.87752224 61.9788604 -89.68135071 58.45968628 C-76.57873446 49.58576413 -63.47754253 40.70976264 -50.38330078 31.82348633 C-49.81815765 31.43996002 -49.25301453 31.05643372 -48.67074585 30.6612854 C-42.70358782 26.61164266 -36.73689785 22.56131074 -30.77049255 18.51055908 C-28.19835377 16.76433091 -25.62608726 15.01829095 -23.05380249 13.27227783 C-21.24529278 12.04458363 -19.43697419 10.8166083 -17.62866211 9.58862305 C-16.51823926 8.83486469 -15.40780682 8.08112045 -14.29736328 7.32739258 C-12.85224365 6.3462146 -12.85224365 6.3462146 -11.37792969 5.34521484 C-10.45157715 4.71929443 -9.52522461 4.09337402 -8.57080078 3.44848633 C-7.56581543 2.66723389 -6.56083008 1.88598145 -5.52539062 1.08105469 C-2.57080078 -0.55151367 -2.57080078 -0.55151367 0 0 Z " fill="#1F4FBA" transform="translate(541.57080078125,323.551513671875)"/>
                  <path d="M0 0 C67.27358491 0 67.27358491 0 83.7421875 15.65625 C92.79062432 25.56001169 94.57799282 36.97163517 94.25 49.9921875 C93.67470332 62.09067663 89.01846993 73.71976765 80 82 C57.69784825 99.06198452 25.52203484 95 0 95 C0 63.65 0 32.3 0 0 Z " fill="#1C4AB0" transform="translate(629,508)"/>
                  <path d="M0 0 C67.06031182 0 67.06031182 0 84.28515625 16.09765625 C92.62253149 25.34663517 94.56660661 37.22340802 94.28515625 49.2890625 C93.30633052 62.02720557 88.94854015 73.11476099 79.60546875 81.95703125 C57.44658283 99.33198977 25.80137381 95 0 95 C0 63.65 0 32.3 0 0 Z " fill="#1C4AB0" transform="translate(372,508)"/>
                </svg>
                <div>
                  <h1 style="margin: 0; font-size: 28px; font-weight: bold;">Rios Roofing</h1>
                  <p style="margin: 0; font-size: 16px; opacity: 0.9;">Professional Services</p>
                </div>
              </div>
            </div>
            
            <!-- Message Content -->
            <div style="padding: 30px; background-color: #ffffff; line-height: 1.6;">
              ${emailForm.message.replace(/\n/g, '<br>')}
            </div>
            
            <!-- Invoice Summary Section -->
            <div style="margin: 0 30px 20px 30px; border: 1px solid #e5e7eb; border-radius: 8px; overflow: hidden;">
              <div style="background-color: #f8fafc; padding: 15px; border-bottom: 1px solid #e5e7eb;">
                <h3 style="margin: 0; color: #1f2937; font-size: 16px; font-weight: 600;">Invoice Summary</h3>
              </div>
              <div style="padding: 20px;">
                <table style="width: 100%; border-collapse: collapse;">
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500; width: 40%;">Invoice Number:</td>
                    <td style="padding: 8px 0; color: #1f2937; font-weight: 600;">INV-${formatNumber(invoice?.invoice_number || 0)}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Issue Date:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${invoice?.issue_date ? new Date(invoice.issue_date).toLocaleDateString() : 'N/A'}</td>
                  </tr>
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Due Date:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${invoice?.due_date ? new Date(invoice.due_date).toLocaleDateString() : 'N/A'}</td>
                  </tr>
                  ${
                    invoice?.customer
                      ? `
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Customer:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${invoice.customer.first_name} ${invoice.customer.last_name}</td>
                  </tr>
                  ${
                    invoice.customer.company
                      ? `
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Company:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${invoice.customer.company}</td>
                  </tr>`
                      : ''
                  }
                  `
                      : ''
                  }
                  ${
                    invoice?.job_title
                      ? `
                  <tr>
                    <td style="padding: 8px 0; color: #6b7280; font-weight: 500;">Project:</td>
                    <td style="padding: 8px 0; color: #1f2937;">${invoice.job_title}</td>
                  </tr>`
                      : ''
                  }
                  <tr style="border-top: 1px solid #e5e7eb;">
                    <td style="padding: 12px 0 8px 0; color: #6b7280; font-weight: 500;">Subtotal:</td>
                    <td style="padding: 12px 0 8px 0; color: #1f2937;">$${formatMoneyValue(invoice?.subtotal || 0)}</td>
                  </tr>
                  ${
                    invoice?.tax_rate && invoice.tax_rate > 0
                      ? `
                  <tr>
                    <td style="padding: 4px 0; color: #6b7280; font-weight: 500;">Tax (${(invoice.tax_rate * 100).toFixed(1)}%):</td>
                    <td style="padding: 4px 0; color: #1f2937;">$${formatMoneyValue((invoice.subtotal || 0) * (invoice.tax_rate || 0))}</td>
                  </tr>`
                      : ''
                  }
                  <tr style="border-top: 2px solid #2563eb;">
                    <td style="padding: 12px 0 8px 0; color: #2563eb; font-weight: 700; font-size: 16px;">Total Amount:</td>
                    <td style="padding: 12px 0 8px 0; color: #2563eb; font-weight: 700; font-size: 16px;">$${formatMoneyValue(invoice?.total || 0)}</td>
                  </tr>
                  ${
                    (invoice?.invoice_payment && invoice.invoice_payment.length > 0) ||
                    (invoice?.payments && invoice.payments.length > 0)
                      ? `
                  <tr>
                    <td style="padding: 8px 0 4px 0; color: #16a34a; font-weight: 600;">Total Payments:</td>
                    <td style="padding: 8px 0 4px 0; color: #16a34a; font-weight: 600;">-$${formatMoneyValue(
                      calculateTotalPayments(invoice)
                    )}</td>
                  </tr>`
                      : ''
                  }
                  <tr style="border-top: 1px solid #dc2626; background-color: #fef2f2;">
                    <td style="padding: 12px 8px; color: #dc2626; font-weight: 700; font-size: 18px;">Amount Due:</td>
                    <td style="padding: 12px 8px; color: #dc2626; font-weight: 700; font-size: 18px;">$${formatMoneyValue(
                      calculateAmountDue(invoice)
                    )}</td>
                  </tr>
                </table>
              </div>
            </div>
            
            ${
              (invoice?.invoice_payment && invoice.invoice_payment.length > 0) ||
              (invoice?.payments && invoice.payments.length > 0)
                ? `
            <!-- Payment History Section -->
            <div style="margin: 0 30px 20px 30px; border: 1px solid #e5e7eb; border-radius: 8px; overflow: hidden;">
              <div style="background-color: #f0fdf4; padding: 15px; border-bottom: 1px solid #e5e7eb;">
                <h3 style="margin: 0; color: #16a34a; font-size: 16px; font-weight: 600;">Payment History</h3>
              </div>
              <div style="padding: 20px;">
                <table style="width: 100%; border-collapse: collapse;">
                  <thead>
                    <tr style="border-bottom: 1px solid #e5e7eb;">
                      <th style="padding: 8px 0; text-align: left; color: #6b7280; font-weight: 600; font-size: 14px;">Date</th>
                      <th style="padding: 8px 0; text-align: left; color: #6b7280; font-weight: 600; font-size: 14px;">Method</th>
                      <th style="padding: 8px 0; text-align: right; color: #6b7280; font-weight: 600; font-size: 14px;">Amount</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${(invoice?.invoice_payment || invoice?.payments || [])
                      .map(
                        (payment: any) => `
                    <tr style="border-bottom: 1px solid #f3f4f6;">
                      <td style="padding: 10px 0; color: #1f2937;">${payment.date_received ? new Date(payment.date_received).toLocaleDateString() : 'N/A'}</td>
                      <td style="padding: 10px 0; color: #1f2937;">${payment.payment_method || 'N/A'}</td>
                      <td style="padding: 10px 0; text-align: right; color: #16a34a; font-weight: 600;">$${formatMoneyValue(parseFloat(payment.amount) || 0)}</td>
                    </tr>
                    `
                      )
                      .join('')}
                  </tbody>
                </table>
              </div>
            </div>`
                : ''
            }
            
            ${
              pdfBase64
                ? `
            <!-- Invoice Attachment Notice -->
            <div style="background-color: #f3f4f6; padding: 20px; margin: 0 30px; border-radius: 8px; border-left: 4px solid #2563eb;">
              <h3 style="margin: 0 0 10px 0; color: #1f2937; font-size: 16px;">Invoice Attached</h3>
              <p style="margin: 0; color: #6b7280; font-size: 14px;">
                Your invoice (${pdfFilename}) is attached to this email as a PDF document.
              </p>
            </div>`
                : ''
            }
            
            <!-- Thank You Message -->
            <div style="margin: 20px 30px; padding: 25px; background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%); border-radius: 8px; border-left: 4px solid #0ea5e9; text-align: center;">
              <h3 style="margin: 0 0 15px 0; color: #0c4a6e; font-size: 18px; font-weight: 600;">Thank You for Your Business!</h3>
              <p style="margin: 0 0 10px 0; color: #0369a1; font-size: 16px; line-height: 1.5;">
                We truly appreciate the opportunity to serve you with our roofing services. Your trust in Rios Roofing means the world to us.
              </p>
              <p style="margin: 0; color: #0369a1; font-size: 14px; line-height: 1.4;">
                ${invoice?.customer ? `Thank you, ${invoice.customer.first_name}` : 'Thank you'}, for choosing us for your roofing needs. We're committed to providing exceptional quality and service on every project.
              </p>
            </div>
            
            <!-- Footer -->
            <div style="background-color: #f9fafb; padding: 20px 30px; text-align: center; font-size: 12px; color: #6b7280; border-radius: 0 0 8px 8px;">
              <div style="border-top: 1px solid #e5e7eb; padding-top: 15px;">
                <p style="margin: 5px 0;"><strong>Rios Roofing Services</strong></p>
                <p style="margin: 5px 0;">150 Tallant St, Houston TX 77076</p>
                <p style="margin: 5px 0;">Phone: 832-310-3593 | Email: rrios.roofing@gmail.com</p>
                <p style="margin: 10px 0 5px 0; font-style: italic;">
                  This email was sent from The Roofing App
                </p>
              </div>
            </div>
          </div>
        `,
        textBody: emailForm.message,
        attachments: pdfBase64
          ? [
              {
                filename: pdfFilename,
                content: pdfBase64,
                mimeType: 'application/pdf'
              }
            ]
          : undefined
      });

      if (result.success) {
        toast({
          title: 'Email Sent Successfully',
          description: `Invoice email ${pdfBase64 ? 'with PDF attachment ' : ''}has been sent to ${emailForm.to}`,
          variant: 'default'
        });
        setIsOpen(false);
        // Reset form
        setEmailForm((prev) => ({
          ...prev,
          cc: '',
          message: prev.message // Keep the default message template
        }));
      } else {
        toast({
          title: 'Failed to Send Email',
          description: result.error || 'An unknown error occurred while sending the email.',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: 'Email Send Error',
        description: error instanceof Error ? error.message : 'Failed to send email',
        variant: 'destructive'
      });
    } finally {
      setIsSending(false);
    }
  };

  const isReady = isInitialized && !serviceLoading;
  const hasError = serviceError !== null;

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button
            size="sm"
            variant="outline"
            disabled={!isReady || hasError}
            title={
              !isReady
                ? 'Loading Google services...'
                : hasError
                  ? 'Google services unavailable'
                  : 'Email invoice'
            }>
            <Mail className="w-4 h-4 mr-2" />
            Email Invoice
          </Button>
        )}
      </DialogTrigger>

      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Email Invoice</DialogTitle>
          <DialogDescription>
            Send invoice INV-{formatNumber(invoice?.invoice_number || 0)} to your customer via
            email. The invoice PDF will be automatically attached to the email.
          </DialogDescription>
        </DialogHeader>

        {hasError && (
          <div className="bg-red-50 border border-red-200 rounded-md p-3 mb-4">
            <p className="text-sm text-red-800">
              <strong>Service Error:</strong> {serviceError}
            </p>
            <p className="text-xs text-red-600 mt-1">
              Please ensure you have granted Gmail permissions when signing in with Google.
            </p>
          </div>
        )}

        <div className="flex flex-col gap-4 w-full">
          {/* Email Template Selector */}
          <div className="flex flex-col gap-1">
            <Label className="text-left flex items-center gap-2">
              <FileText className="w-4 h-4" />
              Email Template
            </Label>
            <Select value={selectedTemplate} onValueChange={handleTemplateChange}>
              <SelectTrigger className="w-full py-6">
                <SelectValue placeholder="Select an email template" />
              </SelectTrigger>
              <SelectContent>
                {emailTemplates.map((template) => (
                  <SelectItem key={template.id} value={template.id}>
                    <div className="flex flex-col items-start">
                      <span className="font-medium">{template.name}</span>
                      <span className="text-xs text-muted-foreground">{template.description}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {/* Template Description */}
            <div className="text-sm text-muted-foreground bg-muted/50 p-3 rounded-md">
              <span className="font-medium">Template: </span>
              {currentTemplate.description}
            </div>
          </div>

          {/* PDF Display Options */}
          <div className="flex flex-col gap-2">
            <Label className="text-sm font-medium">PDF Display Options</Label>
            <div className="space-y-3 p-4 bg-muted/30 rounded-lg border">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="showPaymentHistory"
                  checked={displayOptions.showPaymentHistory}
                  onCheckedChange={() => toggleOption('showPaymentHistory')}
                />
                <Label htmlFor="showPaymentHistory" className="text-sm font-normal cursor-pointer">
                  Show payment history
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="showCustomerNotes"
                  checked={displayOptions.showCustomerNotes}
                  onCheckedChange={() => toggleOption('showCustomerNotes')}
                />
                <Label htmlFor="showCustomerNotes" className="text-sm font-normal cursor-pointer">
                  Show customer notes
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="showPaymentInformation"
                  checked={displayOptions.showPaymentInformation}
                  onCheckedChange={() => toggleOption('showPaymentInformation')}
                />
                <Label
                  htmlFor="showPaymentInformation"
                  className="text-sm font-normal cursor-pointer">
                  Show payment information
                </Label>
              </div>

              <p className="text-xs text-muted-foreground mt-2">
                These options control what information is included in the PDF attachment.
              </p>
            </div>
          </div>

          <div className="flex flex-col gap-1">
            <Label htmlFor="to" className="text-left">
              To *
            </Label>
            <Input
              id="to"
              placeholder="customer@example.com"
              value={emailForm.to}
              onChange={(e) => handleFormChange('to', e.target.value)}
              className="w-full"
            />
          </div>

          <div className="flex flex-col gap-1">
            <Label htmlFor="cc" className="text-left">
              CC
            </Label>
            <Input
              id="cc"
              placeholder="Optional - separate multiple emails with commas"
              value={emailForm.cc}
              onChange={(e) => handleFormChange('cc', e.target.value)}
              className="col-span-3"
            />
          </div>

          <div className="flex flex-col gap-1">
            <Label htmlFor="subject" className="text-left">
              Subject *
            </Label>
            <Input
              id="subject"
              value={emailForm.subject}
              onChange={(e) => handleFormChange('subject', e.target.value)}
              className="col-span-3"
            />
          </div>

          <div className="flex flex-col gap-1">
            <Label htmlFor="message" className="text-left pt-2">
              Message *
            </Label>
            <Textarea
              id="message"
              rows={12}
              value={emailForm.message}
              onChange={(e) => handleFormChange('message', e.target.value)}
              className="col-span-3 resize-none"
            />
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => setIsOpen(false)} disabled={isSending}>
            Cancel
          </Button>
          <Button onClick={handleSendEmail} disabled={isSending || !isReady || hasError}>
            {isSending ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Sending...
              </>
            ) : (
              <>
                <Mail className="w-4 h-4 mr-2" />
                Send Email
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
